#!/usr/bin/env perl

use strict; 
use warnings;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use JSON;
use MIME::Types;
use CouchDB::Client;
use File::Spec;
use version; our $VERSION = qv('0.0.1');

my $result = GetOptions(
    \%ARGV,
    'input|i=s', 'output|o=s', 'error|e=s',
    'uri|u=s', 'db|d=s',
    _meta_options( \%ARGV ),
);

my ( $INH, $OUTH, $ERRH ) = _prepare_io( \%ARGV, \@ARGV );

my $ua = LWP::UserAgent->new(
    agent => "json2couch/$VERSION",
    env_proxy => 1,
);

my $server = CouchDB::Client->new(
    uri => $ARGV{uri},
    ua => $ua,
);
$server->testConnection or die "Server $ARGV{uri} cannot be reached";

my $db = $server->newDB($ARGV{db});

$server->dbExists($ARGV{db}) or $db->create;

my $json_data = get_json($ARGV{input});

while (my ($name, $data) = each %$json_data) {

    my $doc = $db->newDoc($name);
    $doc->data($data);

    if (my $audio_file = delete $data->{audio}) {
        $doc->addAttachment(
            (File::Spec->splitpath($audio_file))[2],
            MIME::Types->new->mimeTypeOf($audio_file)->type,
            get_audio($audio_file)
        );
    }

    $doc->create;
}


sub get_audio {
    local $/;
    open my $FILE, '<', shift or die $!;
    binmode $FILE;
    return <$FILE>;
}

sub get_json {
    local $/;
    open my $FILE, '<', shift or die $!;
    return decode_json(<$FILE>);
}


sub _meta_options {
    my ($opt) = @_;

    return (
        'quiet'     => sub { $opt->{quiet}   = 1;          $opt->{verbose} = 0 },
        'verbose:i' => sub { $opt->{verbose} = $_[1] // 1; $opt->{quiet}   = 0 },
        'version'   => sub { pod2usage( -sections => ['VERSION', 'REVISION'],
                                        -verbose  => 99 )                      },
        'license'   => sub { pod2usage( -sections => ['AUTHOR', 'COPYRIGHT'],
                                        -verbose  => 99 )                      },
        'usage'     => sub { pod2usage( -sections => ['SYNOPSIS'],
                                        -verbose  => 99 )                      },
        'help'      => sub { pod2usage( -verbose  => 1  )                      },
        'manual'    => sub { pod2usage( -verbose  => 2  )                      },
    );
}

sub _prepare_io {
    my ($opt, $argv) = @_;

    my ($INH, $OUTH, $ERRH);
    
    # If user explicitly sets -i, put the argument in @$argv
    unshift @$argv, $opt->{input} if exists $opt->{input};

    # Allow in-situ arguments (equal input and output filenames)
    if (    exists $opt->{input} and exists $opt->{output}
               and $opt->{input} eq $opt->{output} ) {
        open $INH, q{<}, $opt->{input}
            or die "Can't read $opt->{input}: $!";
        unlink $opt->{output};
    }
    else { $INH = *STDIN }

    # Redirect STDOUT to a file if so specified
    if ( exists $opt->{output} and q{-} ne $opt->{output} ) {
        open $OUTH, q{>}, $opt->{output}
            or die "Can't write $opt->{output}: $!";
    }
    else { $OUTH = *STDOUT }

    # Log STDERR if so specified
    if ( exists $opt->{error} and q{-} ne $opt->{error} ) {
        open $ERRH, q{>}, $opt->{error}
            or die "Can't write $opt->{error}: $!";
    }
    elsif ( exists $opt->{quiet} and $opt->{quiet} ) {
        use File::Spec;
        open $ERRH, q{>}, File::Spec->devnull
            or die "Can't write $opt->{error}: $!";
    }
    else { $ERRH = *STDERR }

    return ( $INH, $OUTH, *STDERR = $ERRH );
}


__END__


=head1 NAME

 ann - Parse and decorate Guy Madison's M-skatt output files with additional annotations


=head1 SYNOPSIS

 ann [OPTION]... [-a [echonest|beatsI|beatsII|audio|pfd|mtd|ssd]=DIR]... -d DAI-FILES... -e EST-FILES...


=head1 DESCRIPTION

 Processes Guy Madison's M-skatt output *.dai (experiment description) and
 *.est (experiment data) files to native perl and json structures.

 Optionally fetches curated annotations from various services (Echo Nest for now)
 

=head1 OPTIONS

 -d, --dai-files    <list of N strings > list of filenames with .dai extension
 -e, --est-files    <list of N strings > list of filenames with .est extension
 -a, --annotations  [string=string pair] -a key=value, where key is one of:
                                             'echonest', 'beatsI', 'beatsII', 'audio', 'pfd', 'mtd', 'ssd',
                                         and value is a directory containing:
                                             '*.json', '*.beats', '*.beats', '*.mp3 '*.pfds2', '*.microtd', and '*.ssimd' files,
                                         respectively (This option can be repeated multiple times)
 -o, --output       [string]             output filename                          (STDOUT)
     --verbose      [integer]            print increasingly verbose error messages
     --quiet                             print no diagnostic or warning messages
     --version                           print current version
     --license                           print author's contact and copyright information
     --help                              print this information
     --manual                            print the plain old documentation page


=head1 VERSION

 0.0.1


=head1 AUTHOR

 Pedro Silva <pasilva@inescporto.pt>
 Sound and Music Computing Group
 Telecommunications and Multimedia Group
 INESC Porto


=head1 COPYRIGHT

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.

=cut
